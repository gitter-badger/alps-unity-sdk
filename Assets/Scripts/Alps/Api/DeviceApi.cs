using System;
using System.Collections.Generic;
using RestSharp;
using Alps.Client;
using Alps.Model;

namespace Alps.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi
    {
        /// <summary>
        /// Create a device 
        /// </summary>
        /// <param name="device">The device to be created.</param>
        /// <returns>Device</returns>
        Device CreateDevice (Device device);
        /// <summary>
        /// Create a new location for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="location">Location to create for a device. </param>
        /// <returns>Location</returns>
        Location CreateLocation (string deviceId, Location location);
        /// <summary>
        /// Create a publication for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="publication">Publication to create on a device. </param>
        /// <returns>Publication</returns>
        Publication CreatePublication (string deviceId, Publication publication);
        /// <summary>
        /// Create a subscription for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device. </param>
        /// <param name="subscription">Subscription to create on a device. </param>
        /// <returns>Subscription</returns>
        Subscription CreateSubscription (string deviceId, Subscription subscription);
        /// <summary>
        /// Delete an existing device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <returns></returns>
        void DeleteDevice (string deviceId);
        /// <summary>
        /// Delete a Publication 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="publicationId">The id (UUID) of the subscription.</param>
        /// <returns></returns>
        void DeletePublication (string deviceId, string publicationId);
        /// <summary>
        /// Delete a Subscription 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="subscriptionId">The id (UUID) of the subscription.</param>
        /// <returns></returns>
        void DeleteSubscription (string deviceId, string subscriptionId);
        /// <summary>
        /// Info about a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <returns>Device</returns>
        Device GetDevice (string deviceId);
        /// <summary>
        /// Get IBeacons triples for all registered devices Keys in map are device UUIDs and values are IBeacon triples. In model you can see example values \&quot;property1\&quot; \&quot;property2\&quot; \&quot;property3\&quot; instead of random UUIDs this is generated by OpenApi document browser
        /// </summary>
        /// <returns>IBeaconTriples</returns>
        IBeaconTriples GetIBeaconTriples ();
        /// <summary>
        /// Get match for the device by its id 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the user device.</param>
        /// <param name="matchId">The id (UUID) of the match.</param>
        /// <returns>Match</returns>
        Match GetMatch (string deviceId, string matchId);
        /// <summary>
        /// Get matches for the device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <returns>Matches</returns>
        Matches GetMatches (string deviceId);
        /// <summary>
        /// Info about a publication on a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="publicationId">The id (UUID) of the publication.</param>
        /// <returns>Publication</returns>
        Publication GetPublication (string deviceId, string publicationId);
        /// <summary>
        /// Get all publications for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <returns>Publications</returns>
        Publications GetPublications (string deviceId);
        /// <summary>
        /// Info about a subscription on a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="subscriptionId">The id (UUID) of the subscription.</param>
        /// <returns>Subscription</returns>
        Subscription GetSubscription (string deviceId, string subscriptionId);
        /// <summary>
        /// Get all subscriptions for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <returns>Subscriptions</returns>
        Subscriptions GetSubscriptions (string deviceId);
        /// <summary>
        /// Trigger the proximity event between a device and a ranged BLE iBeacon 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param>
        /// <param name="proximityEvent">The proximity event to be created for the device.</param>
        /// <returns>ProximityEvent</returns>
        ProximityEvent TriggerProximityEvents (string deviceId, ProximityEvent proximityEvent);
        /// <summary>
        /// Updates name or/and device token for existing device Token can be only updated for mobile devices.
        /// </summary>
        /// <param name="device">The device update description.</param>
        /// <returns>Device</returns>
        Device UpdateDevice (DeviceUpdate device);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DeviceApi : IDeviceApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public DeviceApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// Create a device 
        /// </summary>
        /// <param name="device">The device to be created.</param> 
        /// <returns>Device</returns>            
        public Device CreateDevice (Device device)
        {
            
            // verify the required parameter 'device' is set
            if (device == null) throw new ApiException(400, "Missing required parameter 'device' when calling CreateDevice");
            
    
            var path = "/devices";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                postBody = ApiClient.Serialize(device); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDevice: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateDevice: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Device) ApiClient.Deserialize(response.Content, typeof(Device), response.Headers);
        }
    
        /// <summary>
        /// Create a new location for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="location">Location to create for a device. </param> 
        /// <returns>Location</returns>            
        public Location CreateLocation (string deviceId, Location location)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling CreateLocation");
            
            // verify the required parameter 'location' is set
            if (location == null) throw new ApiException(400, "Missing required parameter 'location' when calling CreateLocation");
            
    
            var path = "/devices/{deviceId}/locations";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                postBody = ApiClient.Serialize(location); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateLocation: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateLocation: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Location) ApiClient.Deserialize(response.Content, typeof(Location), response.Headers);
        }
    
        /// <summary>
        /// Create a publication for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="publication">Publication to create on a device. </param> 
        /// <returns>Publication</returns>            
        public Publication CreatePublication (string deviceId, Publication publication)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling CreatePublication");
            
            // verify the required parameter 'publication' is set
            if (publication == null) throw new ApiException(400, "Missing required parameter 'publication' when calling CreatePublication");
            
    
            var path = "/devices/{deviceId}/publications";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                postBody = ApiClient.Serialize(publication); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePublication: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePublication: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Publication) ApiClient.Deserialize(response.Content, typeof(Publication), response.Headers);
        }
    
        /// <summary>
        /// Create a subscription for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device. </param> 
        /// <param name="subscription">Subscription to create on a device. </param> 
        /// <returns>Subscription</returns>            
        public Subscription CreateSubscription (string deviceId, Subscription subscription)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling CreateSubscription");
            
            // verify the required parameter 'subscription' is set
            if (subscription == null) throw new ApiException(400, "Missing required parameter 'subscription' when calling CreateSubscription");
            
    
            var path = "/devices/{deviceId}/subscriptions";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                postBody = ApiClient.Serialize(subscription); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateSubscription: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateSubscription: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Subscription) ApiClient.Deserialize(response.Content, typeof(Subscription), response.Headers);
        }
    
        /// <summary>
        /// Delete an existing device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <returns></returns>            
        public void DeleteDevice (string deviceId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeleteDevice");
            
    
            var path = "/devices/{deviceId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteDevice: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteDevice: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// Delete a Publication 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="publicationId">The id (UUID) of the subscription.</param> 
        /// <returns></returns>            
        public void DeletePublication (string deviceId, string publicationId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeletePublication");
            
            // verify the required parameter 'publicationId' is set
            if (publicationId == null) throw new ApiException(400, "Missing required parameter 'publicationId' when calling DeletePublication");
            
    
            var path = "/devices/{deviceId}/publications/{publicationId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
path = path.Replace("{" + "publicationId" + "}", ApiClient.ParameterToString(publicationId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletePublication: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeletePublication: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// Delete a Subscription 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="subscriptionId">The id (UUID) of the subscription.</param> 
        /// <returns></returns>            
        public void DeleteSubscription (string deviceId, string subscriptionId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling DeleteSubscription");
            
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null) throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling DeleteSubscription");
            
    
            var path = "/devices/{deviceId}/subscriptions/{subscriptionId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
path = path.Replace("{" + "subscriptionId" + "}", ApiClient.ParameterToString(subscriptionId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteSubscription: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling DeleteSubscription: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
        /// <summary>
        /// Info about a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <returns>Device</returns>            
        public Device GetDevice (string deviceId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetDevice");
            
    
            var path = "/devices/{deviceId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDevice: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetDevice: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Device) ApiClient.Deserialize(response.Content, typeof(Device), response.Headers);
        }
    
        /// <summary>
        /// Get IBeacons triples for all registered devices Keys in map are device UUIDs and values are IBeacon triples. In model you can see example values \&quot;property1\&quot; \&quot;property2\&quot; \&quot;property3\&quot; instead of random UUIDs this is generated by OpenApi document browser
        /// </summary>
        /// <returns>IBeaconTriples</returns>            
        public IBeaconTriples GetIBeaconTriples ()
        {
            
    
            var path = "/devices/IBeaconTriples";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetIBeaconTriples: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetIBeaconTriples: " + response.ErrorMessage, response.ErrorMessage);
    
            return (IBeaconTriples) ApiClient.Deserialize(response.Content, typeof(IBeaconTriples), response.Headers);
        }
    
        /// <summary>
        /// Get match for the device by its id 
        /// </summary> 
        /// <param name="deviceId">The id (UUID) of the user device.</param> 
        /// <param name="matchId">The id (UUID) of the match.</param> 
        /// <returns>Match</returns>            
        public Match GetMatch (string deviceId, string matchId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetMatch");
            
            // verify the required parameter 'matchId' is set
            if (matchId == null) throw new ApiException(400, "Missing required parameter 'matchId' when calling GetMatch");
            
    
            var path = "/devices/{deviceId}/matches/{matchId}";
            path = path.Replace("{format}", "json");
path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
path = path.Replace("{" + "matchId" + "}", ApiClient.ParameterToString(matchId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetMatch: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetMatch: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Match) ApiClient.Deserialize(response.Content, typeof(Match), response.Headers);
        }
    
        /// <summary>
        /// Get matches for the device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <returns>Matches</returns>            
        public Matches GetMatches (string deviceId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetMatches");
            
    
            var path = "/devices/{deviceId}/matches";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetMatches: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetMatches: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Matches) ApiClient.Deserialize(response.Content, typeof(Matches), response.Headers);
        }
    
        /// <summary>
        /// Info about a publication on a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="publicationId">The id (UUID) of the publication.</param> 
        /// <returns>Publication</returns>            
        public Publication GetPublication (string deviceId, string publicationId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetPublication");
            
            // verify the required parameter 'publicationId' is set
            if (publicationId == null) throw new ApiException(400, "Missing required parameter 'publicationId' when calling GetPublication");
            
    
            var path = "/devices/{deviceId}/publications/{publicationId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
path = path.Replace("{" + "publicationId" + "}", ApiClient.ParameterToString(publicationId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetPublication: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetPublication: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Publication) ApiClient.Deserialize(response.Content, typeof(Publication), response.Headers);
        }
    
        /// <summary>
        /// Get all publications for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <returns>Publications</returns>            
        public Publications GetPublications (string deviceId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetPublications");
            
    
            var path = "/devices/{deviceId}/publications";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetPublications: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetPublications: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Publications) ApiClient.Deserialize(response.Content, typeof(Publications), response.Headers);
        }
    
        /// <summary>
        /// Info about a subscription on a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="subscriptionId">The id (UUID) of the subscription.</param> 
        /// <returns>Subscription</returns>            
        public Subscription GetSubscription (string deviceId, string subscriptionId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetSubscription");
            
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null) throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling GetSubscription");
            
    
            var path = "/devices/{deviceId}/subscriptions/{subscriptionId}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
path = path.Replace("{" + "subscriptionId" + "}", ApiClient.ParameterToString(subscriptionId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetSubscription: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetSubscription: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Subscription) ApiClient.Deserialize(response.Content, typeof(Subscription), response.Headers);
        }
    
        /// <summary>
        /// Get all subscriptions for a device 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <returns>Subscriptions</returns>            
        public Subscriptions GetSubscriptions (string deviceId)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling GetSubscriptions");
            
    
            var path = "/devices/{deviceId}/subscriptions";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetSubscriptions: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetSubscriptions: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Subscriptions) ApiClient.Deserialize(response.Content, typeof(Subscriptions), response.Headers);
        }
    
        /// <summary>
        /// Trigger the proximity event between a device and a ranged BLE iBeacon 
        /// </summary>
        /// <param name="deviceId">The id (UUID) of the device.</param> 
        /// <param name="proximityEvent">The proximity event to be created for the device.</param> 
        /// <returns>ProximityEvent</returns>            
        public ProximityEvent TriggerProximityEvents (string deviceId, ProximityEvent proximityEvent)
        {
            
            // verify the required parameter 'deviceId' is set
            if (deviceId == null) throw new ApiException(400, "Missing required parameter 'deviceId' when calling TriggerProximityEvents");
            
            // verify the required parameter 'proximityEvent' is set
            if (proximityEvent == null) throw new ApiException(400, "Missing required parameter 'proximityEvent' when calling TriggerProximityEvents");
            
    
            var path = "/devices/{deviceId}/proximityEvents";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "deviceId" + "}", ApiClient.ParameterToString(deviceId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                postBody = ApiClient.Serialize(proximityEvent); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling TriggerProximityEvents: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling TriggerProximityEvents: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ProximityEvent) ApiClient.Deserialize(response.Content, typeof(ProximityEvent), response.Headers);
        }
    
        /// <summary>
        /// Updates name or/and device token for existing device Token can be only updated for mobile devices.
        /// </summary>
        /// <param name="device">The device update description.</param> 
        /// <returns>Device</returns>            
        public Device UpdateDevice (DeviceUpdate device)
        {
            
            // verify the required parameter 'device' is set
            if (device == null) throw new ApiException(400, "Missing required parameter 'device' when calling UpdateDevice");
            
    
            var path = "/devices/{deviceId}";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                                                postBody = ApiClient.Serialize(device); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.PATCH, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateDevice: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling UpdateDevice: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Device) ApiClient.Deserialize(response.Content, typeof(Device), response.Headers);
        }
    
    }
}
